from params import *
from poly import *
from poly_vec import *

#/*************************************************
#* Name:        unpack_pk
#*
#* Description: Unpack public key pk = (rho, t1).
#*
#* Arguments:   - const uint8_t rho[]: output byte array for rho
#*              - const polyveck *t1: pointer to output vector t1
#*              - uint8_t pk[]: byte array containing bit-packed pk
#**************************************************/

def unpack_pk(rho, t1, pk):
	for i in range(SEEDBYTES):
		rho[i] = pk[i]
 
	for i in range(K):
		polyt1_unpack(t1.vec[i], pk[SEEDBYTES + i*POLYT1_PACKEDBYTES:])


#/*************************************************
#* Name:        unpack_sig
#*
#* Description: Unpack signature sig = (c, z, h).
#*
#* Arguments:   - uint8_t *c: pointer to output challenge hash
#*              - polyvecl *z: pointer to output vector z
#*              - polyveck *h: pointer to output hint vector h
#*              - const uint8_t sig[]: byte array containing
#*                bit-packed signature
#*
#* Returns 1 in case of malformed signature; otherwise 0.
#**************************************************/

def unpack_sig(c, z, h, sig):
	for i in range(SEEDBYTES):
		c[i] = sig[i];
	
	for i in range(L):
		polyz_unpack(z.vec[i], sig[SEEDBYTES + i*POLYZ_PACKEDBYTES:])
  
	offset = SEEDBYTES + L*POLYZ_PACKEDBYTES

	#/* Decode h */
	k = 0	
	for i in range(K):
		for j in range(N):
			h.vec[i].coeffs[j] = 0

		if(sig[offset + OMEGA + i] < k or sig[offset + OMEGA + i] > OMEGA):
			return 1

		for j in range(k, sig[offset + OMEGA + i]):
			#/* Coefficients are ordered for strong unforgeability */
			if (j > k and sig[j] <= sig[j-1]): 
				return 1
			h.vec[i].coeffs[sig[j]] = 1
    
		k = sig[offset + OMEGA + i]

	#/* Extra indices are zero for strong unforgeability */
	for j in range(k, OMEGA):
		if(sig[j] != 0):
			return 1
	
	return 0




pk = bytes.fromhex("49e2f02224c5325d8b573f34878c73cf936ab16c804d4f9af5c6e4c1b48ddb38f10930064d31ce0754d6d01eb581e109cdb99db30aff73485b1a55d384af5adb1452321dbc07ae1afe8d7a56315dce7da50c5c386c8e164fb226ec4882e7cf4d8b1efa64c0c3b55ecd0b181d857b663d39a7bcb81da8abedd1502dc1bd020ca7aef2813565d62a3af132c97bdc2ff4f078d89215d4aa435045d412404e3b8a5251a91236bc26e0cf707518cd0efb1a950ec30588871f95281cf0c5cd3545015b37937dc2fc4a2184dd6cb88f194d9a4c4193949883b4c3060a2ab7cd359417d99a02c40fe8fcc1164524130eb2c4cab1de02d45ca2a9d9c6fa8ce554c5f87faefe7bfd37eb49b11efc49cb6365e6d0fb88d5e10518dc56b0bc6830ee57218816dc0d9dd933612a5cb873c7aa27593e857ed2246e59f571faa2d791bd4c4fa7c2bf9f715dbaa357b77f7cee017a7d1ebd2de68ce5220ada0494c37e4634faae0d30bc95d96802f929fa4ab36c43af8ec2d85f56f662619f95e6a6a52892ce07ab1669dc7b08b77e0d83d5dc99824219dc97dcc3f33df3c41efd50bac4a24058b092b6c45a23c059b3a46829b4eefd5fbaaab1feadd81fdbfac78fd87398b0c7ee9dbcc0479c8482b4792ec1853ad44779cd0ab58f95e878308bdec18582d90779fe5156a7e44591238a69be20ede193c9dd1488b35e1cafb96792cfe77647c41598df873a2137c93fb31ab3702601e66ac97b844a7eeb5a8e2014beccf1e15bb6bdefd15dd1bd5ee0068b4b0bdb5543cc75f15dbcf177c16d9db7334308d493cd37cae9448fa45bfbaa8bfc876916f7bc9c73c5bfc31ee561cbe591d7193844823f623dc68782da3faf3b66aeeafa0b70387c12cf14f100d5454db8e61ce584e564213d8b671a38bffac28a6c9b8ed2fd8b936893e3feaa73c99b939c18f8c1ff932009063ae9972376b19490cd5f2d8640035dcb1f86233498557c28a178cbd14bca725c5d61183cab399497b109f7ffb212f57e44b8feb3d0e08ce6e2cc456a291cc24a042ec4c4ee08884d3370ed145ffaaf9bc88f56f19750ae0a5aa7abf8a814ef572c549879ad2970b3ad928cd880cbe8e2735e50475fed9569d4b83ba78cedb2602761782b8af01810e8997c03473063fd0920c733a56ce6eb3eddf2d70481bd4e3b63a8832733c66da1dd763c8c0626dedba5611268b7e99386b0402dfcb6dae60f4217eedad8ee8e6d67685a4c7718683b6b16098d07605f5c67d5c528e40736fbd5dc6f55848e4c1599041db1f3f2ac7c98916252b7fdd49365f7ab163ae6ea40e7dac264f02e9ea391d5f9fdef50ab33943d5f6479200931f572f8b7750479540e3aa4a2524e2712a4e1561ec31ed0fde0bcb1d87470598c99b374004235e4013ab5f4946f39571170184cb29e95c7af788c9f6441230e3bc456de89a479f6987bb10725f9af3866ab25fe4e063421a6292d242359764169f957188da1cac4e78339bfc4180d98e14190f81d027c4ea8f9965aa49ac254db96dd022a52ae87beb9669623afd96b76040ff8483580a0aea715be9c9876ccd3887d00043c05a7d2196d7eb5459ffd04a178909c579769914464d3ac5352c7e2d9f412ebfa29af74f6f732d3571ad1591ac6be434535f27d612fa93c7e3f316dc1102003079262ba5c7aaa8d411d52442c3f303db5d81d55066008fd10828841413cbac0a010ac40fafc0cd02825c20b3505f4896fb27188237735e8d1a124b2e93e42c896b37c936ad8442a9f5f1c733784a9ad57fbe78589dad3d18eb5deadc7b4a3f8c8f75a195a7ca27bae779111210a1499dfbb1d81a57d8a9df483d819aa0c55")
sig = bytes.fromhex("21bb1d1b9538d262b458865c3645c67a7086ad04dc9525d1e27e6541a6ed082b00000000000000000000000000000000000000000000000000100000000000009a0400000000000000000000000000006881800d917f000003000000000000000000000000000000eead5f0d917f0000000000000000000020000000000000000100000000000000c8ce5e0d917f0000608d800d917f000020000000000000002f000000010000000a0000000000000000000000000000006881800d917f0000d058ec32fd7f000047cb5e0d917f0000a0f1ff7f03000000d058ec32fd7f000000b07d0d917f0000587f5e0d917f0000ffffffffffffffffa080800d03000000a0095e0d917f0000042a5f0d917f0000d055ec32fd7f0000afd8220d917f000000000000000000009d9a5e0d917f00007059ec320100000068021c02000000000600000000000000d055ec32fd7f0000e49a0200030000004081800d917f0000608d800d917f00000000000000000000010800000000000068021c02000000000100000000000000ed8100000000000000000000000000000000000000000000b8841c00000000000010000000000000480e0000000000001d2e4462000000009caab92f00000000696b80600000000000000000000000007a063f61000000007b004325000000000000000000000000000000000000000000000000000000000000000003000000c9034000000000006881800d917f000000000000000000004070800d917f00007059ec32fd7f00000000000000000000579c5e0d917f0000010000000000000000000000000000006859ec32fd7f000000000000000000000000000001000000608d800d917f000000000000000000000a000000000000002059ec32fd7f00006059ec32fd7f00006881800d917f000000000000000000000000000000000000000000000000000000000000000000000000000000000000608d800d917f0000a061ec32fd7f000040030000000000007f454c4602010103000000000000000003003e000100000060090200000000004000000000000000b8721c000000000000000000400038000a00400048004700060000000500000040000000000000004000000000000000400000000000000030020000000000003002000000000000080000000000000003000000040000006067190000000000606719000000000060671900000000001c000000000000001c0000000000000010000000000000000100000005000000000000000000000000000000000000000000000000000000e8fb1b0000000000e8fb1b000000000000002000000000000100000006000000c0071c0000000000c0073c0000000000c0073c0000000000604f000000000000e09100000000000000002000000000000200000006000000a03b1c0000000000a03b3c0000000000a03b3c0000000000e001000000000000e001000000000000080000000000000004000000040000007002000000000000700200000000000070020000000000004400000000000000440000000000000004000000000000000700000004000000c0071c0000000000c0073c0000000000c0073c000000000044ae5e0d917f00007800000000000000460800000000000000b07d0d917f000080ad210d917f0000f87f220d917f00007bb65e0d917f00004608000000000000f87f220d917f000000b07d0d917f0000185cec32fd7f0000145cec32fd7f000011b05e0d917f000000000000000000001a044000000000003803400000000000185cec32fd7f00002e4e3df60000000038f5d803000000002e000000917f0000f05cec32fd7f0000f87f220d917f000080ad210d917f0000145cec32fd7f0000e05cec32fd7f000008b57d0d917f000000000000fd7f000003000000000000003f5fec32fd7f0000b0eb5e0d000000000000000000000000305eec32fd7f0000c084800d917f0000805dec32fd7f000050b57d0d917f000000000000000000006881800d917f0000a85dec32fd7f00004fbb5e0d917f0000010000000000000050b57d0d917f00000100000000000000000000000000000001000000000000006881800d917f000050145e0d917f0000085dec32fd7f0000c70ee03d000000000000000000000000c084800d917f0000f05cec32fd7f0000f87f220d01000000e05cec32fd7f00002e4e3df6000000001a04400000000000ffffffff0000000000000000fd7f00001074220d917f000000b07d0d917f0000000000000000000000000000000000000000000000000000c084800d917f0000705eec32fd7f0000b0b87d0d917f00000000000000000000d879800d917f0000305fec32fd7f00004fbb5e0d917f0000010000000000000038b06000000000006013400000000000a061ec32fd7f0000000000000000000000000000000000000000000000000000060b5f0d917f000001000000000000000000000000000000c084800d917f00001074220d917f00007061ec32fd7f0000ca8e5f0d917f00001c00000000000000408f400000000000a861ec32fd7f000001000000000000007006400000000000b08f400000000000f01a5f0d917f000020403c0000000000b05fec32fd7f0000e5ae350d917f00000000000000000000801f0000ffff0000000000000000000044ae5e0d917f0000000000002000000009000000000000000087800d917f0000a8a1fa32fd7f0000b0a2fa32fd7f00007bb65e0d917f00000900000000000000b0a2fa32fd7f00000087800d917f0000185fec32fd7f0000145fec32fd7f000008dd5e0d917f0000000000000000000027373a0d917f000000ff00000000000000000000000000002f2f2f2f2f2f2f2f2f2f2f2f2f2f2f2f00000000000000000000000000000000000000000000000000000000000000ff7474696d65005f5f7664736f5f676574000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a77d0d917f00000000000000000000888a800d917f0000f05fec32fd7f00000000000000000000e05fec32fd7f000026b062650000000027373a0d917f0000ffffffff000000001887800d917f000080a2fa32fd7f00000087800d917f00000200000000000000000000000000000000000000");

rho = [0 for i in range(SEEDBYTES)]
t1 = polyveck()
unpack_pk(rho, t1, pk)

print("t1 pub k = ")
for i in range(L):
	print("[", end = '')
	for j in range(N):
		print(t1.vec[i].coeffs[j], end = ', ')
	print("],")

c = [0 for i in range(SEEDBYTES)]
z = polyvecl()
h = polyveck()

print(len(sig))


unpack_sig(c, z, h, sig)




